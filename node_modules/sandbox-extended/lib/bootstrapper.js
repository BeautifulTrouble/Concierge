var stdin = process.openStdin();
var Script = process.binding( 'evals').NodeScript || process.binding('evals').Script || require( 'vm' )

stdin.on( 'data', function( str ) {
    var request = JSON.parse(str);

    if (request.run) run(request.run);
})

function run(script) {
    var context = Script.createContext();
    var safeUserScript = Script.runInContext('(' + main.toString() + ')()', context);

    var transmit = function (message, callback) {
        "use strict"; return process.stdout.write(JSON.stringify({ message: message }) + ',', callback);
    };

    try {
        safeUserScript({ send: transmit }, script);
    }
    catch (e) {
        transmit({exception: {name: e.name, message: e.message, stack: e.stack.toString()}},function () { process.exit(0) });
    }
}

function main() {
    var global = this;

    function UserScript(script) {
        return Function('return eval(' + JSON.stringify(script + '') + ')');
    }

    return function run(communicator, sourceCode) {
        "use strict";

        var log = function (value) { "use strict"; communicator.send({ log: value }); }
        var print = function (value) { "use strict"; communicator.send({ print: value }); }

        global.print = print.bind(global)
        global.console = { log: log.bind(global) };

        var result = UserScript(sourceCode)();

        communicator.send({ result: result }, function () {
            process.exit(0)
        });
    }
}