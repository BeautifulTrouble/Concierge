var path = require('path')
var spawn = require('child_process').spawn

function Sandbox(options) {
    ( this.options = options || {} ).__proto__ = Sandbox.options
}

var output = function (handlers, failure, message) {
    if (!!message) {
        var array = JSON.parse('[' + message.toString() + 'null]'); // In some cases `message` may contain
        // merged output from several "output" operations, such as one within the following example
        // '{ message: "Hello" }{ message: "World" }'
        // Such string is obviously an invalid JSON. And to minimize the efforts required for parsing such invalid
        // data, bootstrapper returns each message concatenated with comma `,` in the end of the string, causing the
        // resulting output look like:
        // `{ message: "Hello" },{ message: "World" },`
        // So after second concatenation of '[' and 'null]' strings in the beginning and the end of the string
        // respectively, the resulting string will become vaild JSON:
        // `[{ message: "Hello" },{ message: "World" },null]`

        array.pop(); // Here we pop last `null`

        for (var i = 0; i < array.length; i++) {
            var value = array[i];
            if (value) {
                if ('message' in value) {
                    var message = value.message;

                    for (var handler in handlers) {
                        if (handlers.hasOwnProperty(handler) && handler in message) {
                            handlers[handler](message[handler]);
                        }
                    }
                }
            }
        }
    }
};

Sandbox.prototype.run = function (script, handlers, failure) {
    var timer;
    var child = spawn('node', [this.options.bootstrapper])

    child.stdout.on('data', output.bind(this, handlers, failure))
    child.on('exit', function (code) { clearTimeout(timer) })

    child.stdin.write(JSON.stringify({ run: script }));

    timer = setTimeout(function () {
        child.stdout.removeListener('output', output)
        output(handlers, failure, JSON.stringify({message: { timeout: 'TimeoutError' }}) + ',')
        child.kill('SIGKILL')
    }, this.options.timeout)
};

Sandbox.options = { timeout: 500, bootstrapper: path.join(__dirname, 'bootstrapper.js') }

module.exports = Sandbox;